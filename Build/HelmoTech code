// Include Libraries
#include <Wire.h> // Enables I2C communication
#include <WiFi.h> // ESP32 WiFi library to connect to WiFi
#include <I2Cdev.h> // Simplifies I2C communication for MPU6050
#include <MPU6050.h> // Library to interface with the MPU6050
#include <TinyGPSPlus.h> // Parses/analyzes GPS data (NMEA sentences) from NEO-6M
#include <HardwareSerial.h> // Enables use of extra UART ports on ESP32
#include <RH_ASK.h> // RadioHead library for ASK RF communication(433 MHz)
#include <SPI.h> // Required for RadioHead even if not using SPI directly

//Stores WiFi name and password for ESP32 to connect.
const char* ssid = "WiFi name here"; 
const char* password = "WiFi pass here";

// Pin Definitions
#define GPS_RX_PIN 4     // GPS TX → GPIO4 (ESP32 receives here)
#define GPS_TX_PIN 14    // GPS RX ← GPIO14 (ESP32 transmits here)
#define MRS 26           // Reed switch pin for strap
#define IrRcvr 27        // IR receiver pin for helmet detection
#define MODEM_TX 18      // SIM800L TX pin
#define MODEM_RX 17      // SIM800L RX pin

// Global Variables
TinyGPSPlus gps; // GPS parser object
MPU6050 mpu; // MPU6050 object

// To avoid confusion on controller (due to combinations of components/sensors)
HardwareSerial SerialGPS(1);  // UART1 for GPS
HardwareSerial SerialAT(2);   // UART2 for SIM800L

float Lat = 0;  // Holds the Lat value from GPS
float Lng = 0;  // Holds the Lng value from GPS
float horizontal_speed = 0;  // Holds the speed (mps) from GPS
int16_t ax, ay, az;  // Raw values from MPU ax=acc along x-axis, ay=acc along y-axis, az=acc along z-axis
float ACC_THRESHOLD = -5.0;  // Threshold for deceleration in m/s²
float SPEED_THRESHOLD = 35.0 / 3.6;  // speed in m/s

bool helmetWorn = false;
bool strapFastened = false;
bool alreadySentSignal = false;
bool accidentDetected = false;

// Timing variables
unsigned long lastMpuCheck = 0;
unsigned long lastGsmCheck = 0;
unsigned long lastGpsPrint = 0;

// Delays of 1sec for printing in serial mon
const unsigned long MPU_INTERVAL = 1000;
const unsigned long GSM_INTERVAL = 1000;
const unsigned long GPS_PRINT_INTERVAL = 1000;

RH_ASK driver(2000, 4, 5, 0); // 433 MHz Transmitter setup (TX: 5, RX: 4)

// GSM Setup
#define TINY_GSM_MODEM_SIM800  // Tells the TinyGSM library to use SIM800L
#define SerialMon Serial
#define TINY_GSM_DEBUG SerialMon  // For debugging
#define ADMIN_NUMBER "Contact person's mobile no."

#include <TinyGsmClient.h>  // Library for SIM800L

#ifdef DUMP_AT_COMMANDS
#include <StreamDebugger.h> // Debugging tool, suitable for GSM mdoule
StreamDebugger debugger(SerialAT, SerialMon);
TinyGsm modem(debugger);
#else
TinyGsm modem(SerialAT);
#endif


void setup() {
  Serial.begin(115200);
  delay(1000);

  // Connect to wifi (hotspot)
  WiFi.begin(ssid, password); // Starts the process of connecting the ESP32 to the WiFi
  Serial.print("Connecting to WiFi");

  // Checks the WiFi connection status repeatedly.
  while (WiFi.status() != WL_CONNECTED) {
  delay(500);  // Check connection status again after 0.5sec
  Serial.print(".");
  }
  Serial.println("\nConnected to WiFi!");  // Printed once connected
  Serial.print("IP Address: "); Serial.println(WiFi.localIP());  // Displays the local IP address

  // Initialize GPS on UART1
  SerialGPS.begin(9600, SERIAL_8N1, GPS_RX_PIN, GPS_TX_PIN);
  delay(3000);
  Serial.println("Initializing GPS...");

  // Initialize MPU6050 (I2C)
  Wire.begin(21, 22);  // SDA, SCL
  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed!");
  } else {
    Serial.println("MPU6050 connected.");
  }

  // Initialize SIM800L on UART2
  SerialAT.begin(9600, SERIAL_8N1, MODEM_TX, MODEM_RX);
  delay(3000);
  modem.restart();
  if (modem.getSimStatus() != 1) {   // For when SIM cant be detected
    Serial.println("SIM not ready.");
  } else {
    Serial.println("GSM modem ready.");
  }

  // Initialize 433 MHz Transmitter
  if (!driver.init()) {   // Checks if RF module is working and ready to send data
    Serial.println("433 MHz Transmitter init failed.");
  } else {
    Serial.println("RF Transmitter ready.");
  }

  pinMode(MRS, INPUT);
  pinMode(IrRcvr, INPUT);
  Serial.println("System Initialized");
}

void loop() {
  unsigned long currentMillis = millis();

  // To Process GPS Data Continuously 
  while (SerialGPS.available()) {
    char c = SerialGPS.read();  // Get NMEA sentences from GPS
    gps.encode(c);  // Extract valid location/speed data (NMEA sentences).
  }

  // Update location and speed if GPS is valid
  if (gps.location.isValid()) {
    Lat = gps.location.lat(); // Latitude
    Lng = gps.location.lng(); // Longitude
    if (gps.speed.isValid()) {
      horizontal_speed = gps.speed.mps();  // Get speed on GPS in m/s
    }
  }

  // For Debugging GPS Data
  if (currentMillis - lastGpsPrint >= GPS_PRINT_INTERVAL) {
    if (gps.location.isValid()) {
      Serial.print("Lat: "); Serial.print(Lat, 6);  // Get and print latitude with 6 decimal value
      Serial.print(" | Lng: "); Serial.print(Lng, 6);  // Get and print longitude with 6 decimal value
      Serial.print(" | Speed: "); Serial.print(horizontal_speed * 3.6);  // Get speed value, convert to km/h
      Serial.print(" km/h | Sats: "); Serial.println(gps.satellites.value());  // To know how many satellites are present
    } else {
      Serial.println("Waiting for GPS fix...");
    }
    lastGpsPrint = currentMillis;
  }

  // Helmet and Strap Check
  checkHelmetAndStrap();  // Call Helmet detection helper funtion

  // Check MPU6050
  if (currentMillis - lastMpuCheck >= MPU_INTERVAL) {
    getMpuData();   // Call MPU helper function
    lastMpuCheck = currentMillis;
  }

  // Accident Detection and SMS Sending
  if (currentMillis - lastGsmCheck >= GSM_INTERVAL) {
    bool gpsFix = gps.location.isValid();
    bool gpsSpeedOK = horizontal_speed >= SPEED_THRESHOLD;
    bool mpuAccidentOK = accidentDetected; // set by getMpuData()

     // Condition to satify before sending sms
    if (helmetWorn && strapFastened && !alreadySentSignal && gpsFix && gpsSpeedOK && mpuAccidentOK) {
      sendSMS();  // Call sms helper function
      alreadySentSignal = true;
    }
    lastGsmCheck = currentMillis;
  }
}


// Helper function for the helmet and strap detection
void checkHelmetAndStrap() {
  int mrsState = digitalRead(MRS);
  int IrState = digitalRead(IrRcvr);

  if (mrsState == HIGH && IrState == LOW) {
    helmetWorn = true;
    strapFastened = true;
    Serial.println("Helmet worn, strap fastened.");
    delay(1000);
    driver.send((uint8_t *)"ON", 2);  // Send signal to the RF receiver
    driver.waitPacketSent();
  } else if (mrsState == LOW && IrState == LOW) {
    helmetWorn = false;
    strapFastened = false;
    Serial.println("Fasten your strap!");
    delay(1000);
  } else if (mrsState == HIGH && IrState == HIGH) {
    helmetWorn = false;
    strapFastened = false;
    Serial.println("Wear helmet first!");
    delay(1000);
  }
}

// Helper function for MPU reading
void getMpuData() {
  mpu.getAcceleration(&ax, &ay, &az);  // Get MPU raw data

  // Convert Raw MPU data to gravitational force
  float ax_g = ax / 16384.0;  // Sensitivityn is 16384 LSB/g (Least Significant Bits per g) at ±2g range
  float ay_g = ay / 16384.0;
  float horiz_g = sqrt(ax_g * ax_g + ay_g * ay_g);  // Get horizontal acceleration
  float horiz_acc = horiz_g * 9.80665;  // Convert to m/s^2 

  Serial.print("Ax_g: "); Serial.print(ax_g);
  Serial.print(" | Ay_g: "); Serial.print(ay_g);
  Serial.print(" | Horiz Acc (m/s²): "); Serial.println(horiz_acc);

  if (horizontal_speed >= SPEED_THRESHOLD && horiz_acc > fabs(ACC_THRESHOLD)) {
    accidentDetected = true;
    Serial.println("Sudden deceleration detected, possible accident.");
  } else {
    accidentDetected = false;
  }
}

// Helper function for sending SMS
void sendSMS() {
  String message = "Alert: Accident detected! Location: https://maps.google.com/?g=" + String(Lat, 6) + ", " + String(Lng, 6);
  bool smsSent = modem.sendSMS(ADMIN_NUMBER, message.c_str());

  if (smsSent) {
    Serial.println("SMS sent successfully!");
  } else {
    Serial.println("Failed to send SMS.");
  }
}
